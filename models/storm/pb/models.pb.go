// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: models.proto

package pb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Status int32

const (
	Status_NEW       Status = 0
	Status_ONGOING   Status = 1
	Status_COMPLETED Status = 2
)

var Status_name = map[int32]string{
	0: "NEW",
	1: "ONGOING",
	2: "COMPLETED",
}

var Status_value = map[string]int32{
	"NEW":       0,
	"ONGOING":   1,
	"COMPLETED": 2,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0b5431a010549573, []int{0}
}

type TournamentType int32

const (
	TournamentType_SINGLE_ELIMINATION TournamentType = 0
	TournamentType_DOUBLE_ELIMINATION TournamentType = 1
	TournamentType_ROUND_ROBIN        TournamentType = 2
	TournamentType_COMPASS_DRAW       TournamentType = 3
	TournamentType_SWISS_FORMAT       TournamentType = 4
	TournamentType_GROUP_PLAY         TournamentType = 5
)

var TournamentType_name = map[int32]string{
	0: "SINGLE_ELIMINATION",
	1: "DOUBLE_ELIMINATION",
	2: "ROUND_ROBIN",
	3: "COMPASS_DRAW",
	4: "SWISS_FORMAT",
	5: "GROUP_PLAY",
}

var TournamentType_value = map[string]int32{
	"SINGLE_ELIMINATION": 0,
	"DOUBLE_ELIMINATION": 1,
	"ROUND_ROBIN":        2,
	"COMPASS_DRAW":       3,
	"SWISS_FORMAT":       4,
	"GROUP_PLAY":         5,
}

func (x TournamentType) String() string {
	return proto.EnumName(TournamentType_name, int32(x))
}

func (TournamentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0b5431a010549573, []int{1}
}

type Competition struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" storm:"id,increment"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Competition) Reset()         { *m = Competition{} }
func (m *Competition) String() string { return proto.CompactTextString(m) }
func (*Competition) ProtoMessage()    {}
func (*Competition) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5431a010549573, []int{0}
}
func (m *Competition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Competition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Competition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Competition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Competition.Merge(m, src)
}
func (m *Competition) XXX_Size() int {
	return m.Size()
}
func (m *Competition) XXX_DiscardUnknown() {
	xxx_messageInfo_Competition.DiscardUnknown(m)
}

var xxx_messageInfo_Competition proto.InternalMessageInfo

func (m *Competition) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Competition) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CompetitionTeam struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" storm:"id,increment"`
	CompetitionId        uint64   `protobuf:"varint,2,opt,name=competitionId,proto3" json:"competitionId,omitempty"`
	TeamId               uint64   `protobuf:"varint,3,opt,name=teamId,proto3" json:"teamId,omitempty"`
	Score                int64    `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
	Place                int64    `protobuf:"varint,5,opt,name=place,proto3" json:"place,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CompetitionTeam) Reset()         { *m = CompetitionTeam{} }
func (m *CompetitionTeam) String() string { return proto.CompactTextString(m) }
func (*CompetitionTeam) ProtoMessage()    {}
func (*CompetitionTeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5431a010549573, []int{1}
}
func (m *CompetitionTeam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompetitionTeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompetitionTeam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompetitionTeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompetitionTeam.Merge(m, src)
}
func (m *CompetitionTeam) XXX_Size() int {
	return m.Size()
}
func (m *CompetitionTeam) XXX_DiscardUnknown() {
	xxx_messageInfo_CompetitionTeam.DiscardUnknown(m)
}

var xxx_messageInfo_CompetitionTeam proto.InternalMessageInfo

func (m *CompetitionTeam) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CompetitionTeam) GetCompetitionId() uint64 {
	if m != nil {
		return m.CompetitionId
	}
	return 0
}

func (m *CompetitionTeam) GetTeamId() uint64 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *CompetitionTeam) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *CompetitionTeam) GetPlace() int64 {
	if m != nil {
		return m.Place
	}
	return 0
}

type Tournament struct {
	Id                   uint64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" storm:"id,increment"`
	Name                 string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type                 TournamentType `protobuf:"varint,3,opt,name=type,proto3,enum=dev.justinjudd.org.justin.competition.models.storm.pb.TournamentType" json:"type,omitempty"`
	Status               Status         `protobuf:"varint,4,opt,name=status,proto3,enum=dev.justinjudd.org.justin.competition.models.storm.pb.Status" json:"status,omitempty"`
	CompetitionId        uint64         `protobuf:"varint,5,opt,name=competitionId,proto3" json:"competitionId,omitempty"`
	Seeded               bool           `protobuf:"varint,6,opt,name=seeded,proto3" json:"seeded,omitempty"`
	GameSize             uint32         `protobuf:"varint,7,opt,name=game_size,json=gameSize,proto3" json:"game_size,omitempty"`
	Advancing            uint32         `protobuf:"varint,8,opt,name=advancing,proto3" json:"advancing,omitempty"`
	Scored               bool           `protobuf:"varint,9,opt,name=scored,proto3" json:"scored,omitempty"`
	BracketOrder         []string       `protobuf:"bytes,10,rep,name=bracket_order,json=bracketOrder,proto3" json:"bracket_order,omitempty"`
	Metadata             []byte         `protobuf:"bytes,11,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Tournament) Reset()         { *m = Tournament{} }
func (m *Tournament) String() string { return proto.CompactTextString(m) }
func (*Tournament) ProtoMessage()    {}
func (*Tournament) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5431a010549573, []int{2}
}
func (m *Tournament) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tournament) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tournament.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tournament) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tournament.Merge(m, src)
}
func (m *Tournament) XXX_Size() int {
	return m.Size()
}
func (m *Tournament) XXX_DiscardUnknown() {
	xxx_messageInfo_Tournament.DiscardUnknown(m)
}

var xxx_messageInfo_Tournament proto.InternalMessageInfo

func (m *Tournament) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Tournament) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Tournament) GetType() TournamentType {
	if m != nil {
		return m.Type
	}
	return TournamentType_SINGLE_ELIMINATION
}

func (m *Tournament) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_NEW
}

func (m *Tournament) GetCompetitionId() uint64 {
	if m != nil {
		return m.CompetitionId
	}
	return 0
}

func (m *Tournament) GetSeeded() bool {
	if m != nil {
		return m.Seeded
	}
	return false
}

func (m *Tournament) GetGameSize() uint32 {
	if m != nil {
		return m.GameSize
	}
	return 0
}

func (m *Tournament) GetAdvancing() uint32 {
	if m != nil {
		return m.Advancing
	}
	return 0
}

func (m *Tournament) GetScored() bool {
	if m != nil {
		return m.Scored
	}
	return false
}

func (m *Tournament) GetBracketOrder() []string {
	if m != nil {
		return m.BracketOrder
	}
	return nil
}

func (m *Tournament) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type TournamentTeam struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" storm:"id,increment"`
	TournamentId         uint64   `protobuf:"varint,2,opt,name=tournamentId,proto3" json:"tournamentId,omitempty"`
	TeamId               uint64   `protobuf:"varint,3,opt,name=teamId,proto3" json:"teamId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TournamentTeam) Reset()         { *m = TournamentTeam{} }
func (m *TournamentTeam) String() string { return proto.CompactTextString(m) }
func (*TournamentTeam) ProtoMessage()    {}
func (*TournamentTeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5431a010549573, []int{3}
}
func (m *TournamentTeam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TournamentTeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TournamentTeam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TournamentTeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TournamentTeam.Merge(m, src)
}
func (m *TournamentTeam) XXX_Size() int {
	return m.Size()
}
func (m *TournamentTeam) XXX_DiscardUnknown() {
	xxx_messageInfo_TournamentTeam.DiscardUnknown(m)
}

var xxx_messageInfo_TournamentTeam proto.InternalMessageInfo

func (m *TournamentTeam) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TournamentTeam) GetTournamentId() uint64 {
	if m != nil {
		return m.TournamentId
	}
	return 0
}

func (m *TournamentTeam) GetTeamId() uint64 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

type Team struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" storm:"id,increment"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TournamentId         uint64   `protobuf:"varint,3,opt,name=tournamentId,proto3" json:"tournamentId,omitempty"`
	Metadata             []byte   `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Team) Reset()         { *m = Team{} }
func (m *Team) String() string { return proto.CompactTextString(m) }
func (*Team) ProtoMessage()    {}
func (*Team) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5431a010549573, []int{4}
}
func (m *Team) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Team) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Team.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Team) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Team.Merge(m, src)
}
func (m *Team) XXX_Size() int {
	return m.Size()
}
func (m *Team) XXX_DiscardUnknown() {
	xxx_messageInfo_Team.DiscardUnknown(m)
}

var xxx_messageInfo_Team proto.InternalMessageInfo

func (m *Team) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Team) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Team) GetTournamentId() uint64 {
	if m != nil {
		return m.TournamentId
	}
	return 0
}

func (m *Team) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Player struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" storm:"id,increment"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" storm:"unique"`
	Score                uint64   `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	Metadata             []byte   `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Player) Reset()         { *m = Player{} }
func (m *Player) String() string { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()    {}
func (*Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5431a010549573, []int{5}
}
func (m *Player) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Player.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player.Merge(m, src)
}
func (m *Player) XXX_Size() int {
	return m.Size()
}
func (m *Player) XXX_DiscardUnknown() {
	xxx_messageInfo_Player.DiscardUnknown(m)
}

var xxx_messageInfo_Player proto.InternalMessageInfo

func (m *Player) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Player) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Player) GetScore() uint64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *Player) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type PlayerTeam struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" storm:"id,increment"`
	PlayerId             uint64   `protobuf:"varint,2,opt,name=playerId,proto3" json:"playerId,omitempty"`
	TeamId               uint64   `protobuf:"varint,3,opt,name=teamId,proto3" json:"teamId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerTeam) Reset()         { *m = PlayerTeam{} }
func (m *PlayerTeam) String() string { return proto.CompactTextString(m) }
func (*PlayerTeam) ProtoMessage()    {}
func (*PlayerTeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5431a010549573, []int{6}
}
func (m *PlayerTeam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerTeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerTeam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerTeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerTeam.Merge(m, src)
}
func (m *PlayerTeam) XXX_Size() int {
	return m.Size()
}
func (m *PlayerTeam) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerTeam.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerTeam proto.InternalMessageInfo

func (m *PlayerTeam) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PlayerTeam) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *PlayerTeam) GetTeamId() uint64 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

type Round struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" storm:"id,increment"`
	Status               Status   `protobuf:"varint,2,opt,name=status,proto3,enum=dev.justinjudd.org.justin.competition.models.storm.pb.Status" json:"status,omitempty"`
	TournamentId         uint64   `protobuf:"varint,3,opt,name=tournamentId,proto3" json:"tournamentId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Round) Reset()         { *m = Round{} }
func (m *Round) String() string { return proto.CompactTextString(m) }
func (*Round) ProtoMessage()    {}
func (*Round) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5431a010549573, []int{7}
}
func (m *Round) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Round) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Round.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Round) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Round.Merge(m, src)
}
func (m *Round) XXX_Size() int {
	return m.Size()
}
func (m *Round) XXX_DiscardUnknown() {
	xxx_messageInfo_Round.DiscardUnknown(m)
}

var xxx_messageInfo_Round proto.InternalMessageInfo

func (m *Round) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Round) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_NEW
}

func (m *Round) GetTournamentId() uint64 {
	if m != nil {
		return m.TournamentId
	}
	return 0
}

type Game struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" storm:"id,increment"`
	ArenaId              uint32   `protobuf:"varint,2,opt,name=arenaId,proto3" json:"arenaId,omitempty"`
	RoundId              uint64   `protobuf:"varint,3,opt,name=roundId,proto3" json:"roundId,omitempty"`
	Status               Status   `protobuf:"varint,4,opt,name=status,proto3,enum=dev.justinjudd.org.justin.competition.models.storm.pb.Status" json:"status,omitempty"`
	Bracket              string   `protobuf:"bytes,5,opt,name=bracket,proto3" json:"bracket,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Game) Reset()         { *m = Game{} }
func (m *Game) String() string { return proto.CompactTextString(m) }
func (*Game) ProtoMessage()    {}
func (*Game) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5431a010549573, []int{8}
}
func (m *Game) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Game) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Game.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Game) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Game.Merge(m, src)
}
func (m *Game) XXX_Size() int {
	return m.Size()
}
func (m *Game) XXX_DiscardUnknown() {
	xxx_messageInfo_Game.DiscardUnknown(m)
}

var xxx_messageInfo_Game proto.InternalMessageInfo

func (m *Game) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Game) GetArenaId() uint32 {
	if m != nil {
		return m.ArenaId
	}
	return 0
}

func (m *Game) GetRoundId() uint64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

func (m *Game) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_NEW
}

func (m *Game) GetBracket() string {
	if m != nil {
		return m.Bracket
	}
	return ""
}

type GameTeam struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" storm:"id,increment"`
	GameId               uint64   `protobuf:"varint,2,opt,name=gameId,proto3" json:"gameId,omitempty"`
	TeamId               uint64   `protobuf:"varint,3,opt,name=teamId,proto3" json:"teamId,omitempty"`
	Score                int64    `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
	Place                int64    `protobuf:"varint,5,opt,name=place,proto3" json:"place,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameTeam) Reset()         { *m = GameTeam{} }
func (m *GameTeam) String() string { return proto.CompactTextString(m) }
func (*GameTeam) ProtoMessage()    {}
func (*GameTeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5431a010549573, []int{9}
}
func (m *GameTeam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameTeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameTeam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameTeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameTeam.Merge(m, src)
}
func (m *GameTeam) XXX_Size() int {
	return m.Size()
}
func (m *GameTeam) XXX_DiscardUnknown() {
	xxx_messageInfo_GameTeam.DiscardUnknown(m)
}

var xxx_messageInfo_GameTeam proto.InternalMessageInfo

func (m *GameTeam) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GameTeam) GetGameId() uint64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *GameTeam) GetTeamId() uint64 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *GameTeam) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *GameTeam) GetPlace() int64 {
	if m != nil {
		return m.Place
	}
	return 0
}

type Arena struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" storm:"id,increment"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Arena) Reset()         { *m = Arena{} }
func (m *Arena) String() string { return proto.CompactTextString(m) }
func (*Arena) ProtoMessage()    {}
func (*Arena) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5431a010549573, []int{10}
}
func (m *Arena) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Arena) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Arena.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Arena) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Arena.Merge(m, src)
}
func (m *Arena) XXX_Size() int {
	return m.Size()
}
func (m *Arena) XXX_DiscardUnknown() {
	xxx_messageInfo_Arena.DiscardUnknown(m)
}

var xxx_messageInfo_Arena proto.InternalMessageInfo

func (m *Arena) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Arena) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterEnum("dev.justinjudd.org.justin.competition.models.storm.pb.Status", Status_name, Status_value)
	proto.RegisterEnum("dev.justinjudd.org.justin.competition.models.storm.pb.TournamentType", TournamentType_name, TournamentType_value)
	proto.RegisterType((*Competition)(nil), "dev.justinjudd.org.justin.competition.models.storm.pb.Competition")
	proto.RegisterType((*CompetitionTeam)(nil), "dev.justinjudd.org.justin.competition.models.storm.pb.CompetitionTeam")
	proto.RegisterType((*Tournament)(nil), "dev.justinjudd.org.justin.competition.models.storm.pb.Tournament")
	proto.RegisterType((*TournamentTeam)(nil), "dev.justinjudd.org.justin.competition.models.storm.pb.TournamentTeam")
	proto.RegisterType((*Team)(nil), "dev.justinjudd.org.justin.competition.models.storm.pb.Team")
	proto.RegisterType((*Player)(nil), "dev.justinjudd.org.justin.competition.models.storm.pb.Player")
	proto.RegisterType((*PlayerTeam)(nil), "dev.justinjudd.org.justin.competition.models.storm.pb.PlayerTeam")
	proto.RegisterType((*Round)(nil), "dev.justinjudd.org.justin.competition.models.storm.pb.Round")
	proto.RegisterType((*Game)(nil), "dev.justinjudd.org.justin.competition.models.storm.pb.Game")
	proto.RegisterType((*GameTeam)(nil), "dev.justinjudd.org.justin.competition.models.storm.pb.GameTeam")
	proto.RegisterType((*Arena)(nil), "dev.justinjudd.org.justin.competition.models.storm.pb.Arena")
}

func init() { proto.RegisterFile("models.proto", fileDescriptor_0b5431a010549573) }

var fileDescriptor_0b5431a010549573 = []byte{
	// 782 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0xef, 0x24, 0xce, 0xbf, 0xd7, 0x24, 0x6b, 0x8d, 0xaa, 0xca, 0x2a, 0xa8, 0x1b, 0x19, 0x84,
	0xac, 0x15, 0xeb, 0x95, 0x16, 0x71, 0x41, 0xe2, 0x90, 0x6c, 0x42, 0x64, 0x91, 0xda, 0xd1, 0x38,
	0x51, 0xb5, 0x5c, 0x22, 0x27, 0x33, 0x04, 0x97, 0xfa, 0x0f, 0xf6, 0xb8, 0x52, 0xf7, 0x0c, 0x37,
	0x0e, 0x1c, 0xf9, 0x02, 0xdc, 0xf8, 0x20, 0x9c, 0x10, 0x17, 0xae, 0x2b, 0x54, 0xbe, 0xc1, 0x7e,
	0x02, 0x34, 0x13, 0xd7, 0x49, 0xcb, 0x16, 0xad, 0x97, 0xee, 0x2d, 0xbf, 0xdf, 0x78, 0x7e, 0xef,
	0xf7, 0xde, 0x9b, 0xf7, 0x02, 0xed, 0x20, 0xa2, 0xec, 0x3c, 0x35, 0xe3, 0x24, 0xe2, 0x11, 0xfe,
	0x94, 0xb2, 0x0b, 0xf3, 0x2c, 0x4b, 0xb9, 0x1f, 0x9e, 0x65, 0x94, 0x9a, 0x51, 0xb2, 0xce, 0xa1,
	0xb9, 0x8a, 0x82, 0x98, 0x71, 0x9f, 0xfb, 0x51, 0x68, 0xe6, 0x77, 0x52, 0x1e, 0x25, 0x81, 0x19,
	0x2f, 0x8f, 0x1e, 0xaf, 0x7d, 0xfe, 0x4d, 0xb6, 0x14, 0xdf, 0x3c, 0x59, 0x47, 0xeb, 0xe8, 0x89,
	0x54, 0x5b, 0x66, 0x5f, 0x4b, 0x24, 0x81, 0xfc, 0xb5, 0x89, 0xa2, 0x7f, 0x09, 0xfb, 0xcf, 0xb6,
	0x6a, 0xd8, 0x80, 0x8a, 0x4f, 0x35, 0xd4, 0x43, 0x86, 0x32, 0xd0, 0x5e, 0xbd, 0x7c, 0x78, 0x20,
	0x75, 0x3f, 0xd3, 0x7d, 0xfa, 0xb1, 0x1f, 0xae, 0x12, 0x16, 0xb0, 0x90, 0xeb, 0xa4, 0xe2, 0x53,
	0x8c, 0x41, 0x09, 0xbd, 0x80, 0x69, 0x95, 0x1e, 0x32, 0x5a, 0x44, 0xfe, 0xd6, 0x7f, 0x41, 0xf0,
	0x60, 0x47, 0x6d, 0xc6, 0xbc, 0xa0, 0x84, 0xe2, 0x87, 0xd0, 0xd9, 0x49, 0xcc, 0xa2, 0x52, 0x5a,
	0x21, 0x37, 0x49, 0x7c, 0x08, 0x75, 0xce, 0xbc, 0xc0, 0xa2, 0x5a, 0x55, 0x1e, 0xe7, 0x08, 0x1f,
	0x40, 0x2d, 0x5d, 0x45, 0x09, 0xd3, 0x94, 0x1e, 0x32, 0xaa, 0x64, 0x03, 0x04, 0x1b, 0x9f, 0x7b,
	0x2b, 0xa6, 0xd5, 0x36, 0xac, 0x04, 0xfa, 0xef, 0x55, 0x80, 0x59, 0x94, 0x25, 0xc2, 0x74, 0xc8,
	0xff, 0x5f, 0xd2, 0xf8, 0x39, 0x28, 0xfc, 0x32, 0x66, 0xd2, 0x4e, 0xf7, 0xe9, 0xc8, 0x7c, 0xab,
	0xb6, 0x99, 0x5b, 0x3b, 0xb3, 0xcb, 0x98, 0x11, 0x29, 0x89, 0xe7, 0x50, 0x4f, 0xb9, 0xc7, 0xb3,
	0x54, 0x26, 0xd5, 0x7d, 0xfa, 0xf9, 0x5b, 0x8a, 0xbb, 0x52, 0x84, 0xe4, 0x62, 0xff, 0x2e, 0x74,
	0xed, 0x8e, 0x42, 0xa7, 0x8c, 0x51, 0x46, 0xb5, 0x7a, 0x0f, 0x19, 0x4d, 0x92, 0x23, 0xfc, 0x1e,
	0xb4, 0xd6, 0x5e, 0xc0, 0x16, 0xa9, 0xff, 0x82, 0x69, 0x8d, 0x1e, 0x32, 0x3a, 0xa4, 0x29, 0x08,
	0xd7, 0x7f, 0xc1, 0xf0, 0xfb, 0xd0, 0xf2, 0xe8, 0x85, 0x17, 0xae, 0xfc, 0x70, 0xad, 0x35, 0xe5,
	0xe1, 0x96, 0x90, 0x92, 0xa2, 0x2d, 0x54, 0x6b, 0xe5, 0x92, 0x12, 0xe1, 0x0f, 0xa0, 0xb3, 0x4c,
	0xbc, 0xd5, 0xb7, 0x8c, 0x2f, 0xa2, 0x84, 0xb2, 0x44, 0x83, 0x5e, 0xd5, 0x68, 0x91, 0x76, 0x4e,
	0x3a, 0x82, 0xc3, 0x47, 0xd0, 0x0c, 0x18, 0xf7, 0xa8, 0xc7, 0x3d, 0x6d, 0xbf, 0x87, 0x8c, 0x36,
	0x29, 0xb0, 0x7e, 0x01, 0xdd, 0x9d, 0x02, 0x96, 0x7b, 0x76, 0x3a, 0xb4, 0x79, 0x71, 0xb7, 0x78,
	0x75, 0x37, 0xb8, 0xbb, 0x1e, 0x9d, 0xfe, 0x3d, 0x02, 0xa5, 0x64, 0xb8, 0xd7, 0x3d, 0xa1, 0xdb,
	0x16, 0xaa, 0xaf, 0xb1, 0xb0, 0x9b, 0xbe, 0x72, 0x2b, 0xfd, 0x1f, 0x11, 0xd4, 0xa7, 0xe7, 0xde,
	0x25, 0x4b, 0x4a, 0x18, 0xf9, 0x68, 0xd7, 0xc8, 0x00, 0xbf, 0x7a, 0xf9, 0xb0, 0x9b, 0x7f, 0x9b,
	0x85, 0xfe, 0x77, 0x19, 0xd3, 0x73, 0x73, 0xc5, 0x60, 0x6d, 0x5c, 0xe5, 0x83, 0xf5, 0x5f, 0x76,
	0xce, 0x00, 0x36, 0x6e, 0x4a, 0x96, 0xe6, 0x08, 0x9a, 0xb1, 0xbc, 0x57, 0x74, 0xa1, 0xc0, 0x77,
	0x76, 0xe0, 0x57, 0x04, 0x35, 0x12, 0x65, 0x21, 0x2d, 0x11, 0x67, 0x3b, 0x56, 0x95, 0xfb, 0x1c,
	0xab, 0x37, 0xe8, 0xa2, 0xfe, 0x27, 0x02, 0x65, 0x2c, 0xaa, 0xfa, 0xe6, 0x6e, 0x35, 0x68, 0x78,
	0x09, 0x0b, 0xbd, 0xbc, 0x28, 0x1d, 0x72, 0x0d, 0xc5, 0x49, 0x22, 0x52, 0x2f, 0x62, 0x5d, 0xc3,
	0x77, 0xb5, 0x38, 0x34, 0x68, 0xe4, 0x23, 0x29, 0x57, 0x46, 0x8b, 0x5c, 0x43, 0xfd, 0x27, 0x04,
	0x4d, 0x91, 0x57, 0xc9, 0x8e, 0x1f, 0x42, 0x5d, 0xac, 0x8e, 0xa2, 0xdf, 0x39, 0xba, 0x97, 0x25,
	0x3f, 0x82, 0x5a, 0x5f, 0x14, 0x6a, 0xc7, 0x4e, 0xa7, 0xfc, 0x6c, 0x3e, 0x7a, 0x0c, 0xf5, 0x4d,
	0x15, 0x70, 0x03, 0xaa, 0xf6, 0xe8, 0x54, 0xdd, 0xc3, 0xfb, 0xd0, 0x70, 0xec, 0xb1, 0x63, 0xd9,
	0x63, 0x15, 0xe1, 0x0e, 0xb4, 0x9e, 0x39, 0x27, 0xd3, 0xc9, 0x68, 0x36, 0x1a, 0xaa, 0x95, 0x47,
	0x3f, 0xa0, 0x1b, 0xab, 0x48, 0x6c, 0xf1, 0x43, 0xc0, 0xae, 0x65, 0x8f, 0x27, 0xa3, 0xc5, 0x68,
	0x62, 0x9d, 0x58, 0x76, 0x7f, 0x66, 0x39, 0xb6, 0xba, 0x27, 0xf8, 0xa1, 0x33, 0x1f, 0xdc, 0xe2,
	0x11, 0x7e, 0x00, 0xfb, 0xc4, 0x99, 0xdb, 0xc3, 0x05, 0x71, 0x06, 0x96, 0xad, 0x56, 0xb0, 0x0a,
	0x6d, 0x11, 0xa2, 0xef, 0xba, 0x8b, 0x21, 0xe9, 0x9f, 0xaa, 0x55, 0xc1, 0xb8, 0xa7, 0x96, 0xeb,
	0x2e, 0xbe, 0x70, 0xc8, 0x49, 0x7f, 0xa6, 0x2a, 0xb8, 0x0b, 0x30, 0x26, 0xce, 0x7c, 0xba, 0x98,
	0x4e, 0xfa, 0xcf, 0xd5, 0xda, 0xe0, 0xe0, 0xb7, 0xab, 0x63, 0xf4, 0xc7, 0xd5, 0x31, 0xfa, 0xeb,
	0xea, 0x18, 0xfd, 0xfc, 0xf7, 0xf1, 0xde, 0x57, 0x95, 0x78, 0xb9, 0xac, 0xcb, 0x3f, 0xfd, 0x4f,
	0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x95, 0x5b, 0x68, 0x6a, 0x08, 0x00, 0x00,
}

func (m *Competition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Competition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Competition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintModels(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CompetitionTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompetitionTeam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompetitionTeam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Place != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Place))
		i--
		dAtA[i] = 0x28
	}
	if m.Score != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x20
	}
	if m.TeamId != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.TeamId))
		i--
		dAtA[i] = 0x18
	}
	if m.CompetitionId != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.CompetitionId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Tournament) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tournament) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tournament) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintModels(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.BracketOrder) > 0 {
		for iNdEx := len(m.BracketOrder) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BracketOrder[iNdEx])
			copy(dAtA[i:], m.BracketOrder[iNdEx])
			i = encodeVarintModels(dAtA, i, uint64(len(m.BracketOrder[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Scored {
		i--
		if m.Scored {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.Advancing != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Advancing))
		i--
		dAtA[i] = 0x40
	}
	if m.GameSize != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.GameSize))
		i--
		dAtA[i] = 0x38
	}
	if m.Seeded {
		i--
		if m.Seeded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.CompetitionId != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.CompetitionId))
		i--
		dAtA[i] = 0x28
	}
	if m.Status != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintModels(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TournamentTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TournamentTeam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TournamentTeam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TeamId != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.TeamId))
		i--
		dAtA[i] = 0x18
	}
	if m.TournamentId != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.TournamentId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Team) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Team) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Team) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintModels(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x22
	}
	if m.TournamentId != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.TournamentId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintModels(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Player) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Player) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Player) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintModels(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x22
	}
	if m.Score != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintModels(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerTeam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerTeam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TeamId != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.TeamId))
		i--
		dAtA[i] = 0x18
	}
	if m.PlayerId != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.PlayerId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Round) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Round) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Round) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TournamentId != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.TournamentId))
		i--
		dAtA[i] = 0x18
	}
	if m.Status != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Game) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Game) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Game) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Bracket) > 0 {
		i -= len(m.Bracket)
		copy(dAtA[i:], m.Bracket)
		i = encodeVarintModels(dAtA, i, uint64(len(m.Bracket)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.RoundId != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.RoundId))
		i--
		dAtA[i] = 0x18
	}
	if m.ArenaId != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.ArenaId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameTeam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameTeam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Place != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Place))
		i--
		dAtA[i] = 0x28
	}
	if m.Score != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x20
	}
	if m.TeamId != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.TeamId))
		i--
		dAtA[i] = 0x18
	}
	if m.GameId != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Arena) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Arena) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Arena) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintModels(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintModels(dAtA []byte, offset int, v uint64) int {
	offset -= sovModels(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Competition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovModels(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CompetitionTeam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovModels(uint64(m.Id))
	}
	if m.CompetitionId != 0 {
		n += 1 + sovModels(uint64(m.CompetitionId))
	}
	if m.TeamId != 0 {
		n += 1 + sovModels(uint64(m.TeamId))
	}
	if m.Score != 0 {
		n += 1 + sovModels(uint64(m.Score))
	}
	if m.Place != 0 {
		n += 1 + sovModels(uint64(m.Place))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Tournament) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovModels(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovModels(uint64(m.Type))
	}
	if m.Status != 0 {
		n += 1 + sovModels(uint64(m.Status))
	}
	if m.CompetitionId != 0 {
		n += 1 + sovModels(uint64(m.CompetitionId))
	}
	if m.Seeded {
		n += 2
	}
	if m.GameSize != 0 {
		n += 1 + sovModels(uint64(m.GameSize))
	}
	if m.Advancing != 0 {
		n += 1 + sovModels(uint64(m.Advancing))
	}
	if m.Scored {
		n += 2
	}
	if len(m.BracketOrder) > 0 {
		for _, s := range m.BracketOrder {
			l = len(s)
			n += 1 + l + sovModels(uint64(l))
		}
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TournamentTeam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovModels(uint64(m.Id))
	}
	if m.TournamentId != 0 {
		n += 1 + sovModels(uint64(m.TournamentId))
	}
	if m.TeamId != 0 {
		n += 1 + sovModels(uint64(m.TeamId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Team) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovModels(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.TournamentId != 0 {
		n += 1 + sovModels(uint64(m.TournamentId))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Player) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovModels(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovModels(uint64(m.Score))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerTeam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovModels(uint64(m.Id))
	}
	if m.PlayerId != 0 {
		n += 1 + sovModels(uint64(m.PlayerId))
	}
	if m.TeamId != 0 {
		n += 1 + sovModels(uint64(m.TeamId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Round) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovModels(uint64(m.Id))
	}
	if m.Status != 0 {
		n += 1 + sovModels(uint64(m.Status))
	}
	if m.TournamentId != 0 {
		n += 1 + sovModels(uint64(m.TournamentId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Game) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovModels(uint64(m.Id))
	}
	if m.ArenaId != 0 {
		n += 1 + sovModels(uint64(m.ArenaId))
	}
	if m.RoundId != 0 {
		n += 1 + sovModels(uint64(m.RoundId))
	}
	if m.Status != 0 {
		n += 1 + sovModels(uint64(m.Status))
	}
	l = len(m.Bracket)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GameTeam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovModels(uint64(m.Id))
	}
	if m.GameId != 0 {
		n += 1 + sovModels(uint64(m.GameId))
	}
	if m.TeamId != 0 {
		n += 1 + sovModels(uint64(m.TeamId))
	}
	if m.Score != 0 {
		n += 1 + sovModels(uint64(m.Score))
	}
	if m.Place != 0 {
		n += 1 + sovModels(uint64(m.Place))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Arena) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovModels(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovModels(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModels(x uint64) (n int) {
	return sovModels(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Competition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Competition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Competition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompetitionTeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompetitionTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompetitionTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompetitionId", wireType)
			}
			m.CompetitionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompetitionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			m.TeamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Place", wireType)
			}
			m.Place = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Place |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tournament) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tournament: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tournament: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= TournamentType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompetitionId", wireType)
			}
			m.CompetitionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompetitionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seeded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Seeded = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameSize", wireType)
			}
			m.GameSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Advancing", wireType)
			}
			m.Advancing = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Advancing |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scored", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Scored = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BracketOrder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BracketOrder = append(m.BracketOrder, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata[:0], dAtA[iNdEx:postIndex]...)
			if m.Metadata == nil {
				m.Metadata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TournamentTeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TournamentTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TournamentTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentId", wireType)
			}
			m.TournamentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TournamentId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			m.TeamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Team) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Team: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Team: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentId", wireType)
			}
			m.TournamentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TournamentId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata[:0], dAtA[iNdEx:postIndex]...)
			if m.Metadata == nil {
				m.Metadata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Player) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Player: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Player: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata[:0], dAtA[iNdEx:postIndex]...)
			if m.Metadata == nil {
				m.Metadata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerTeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			m.TeamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Round) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Round: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Round: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentId", wireType)
			}
			m.TournamentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TournamentId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Game) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Game: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Game: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaId", wireType)
			}
			m.ArenaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArenaId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			m.RoundId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bracket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bracket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameTeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			m.TeamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Place", wireType)
			}
			m.Place = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Place |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Arena) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Arena: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Arena: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModels(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModels
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModels
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupModels
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthModels
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthModels        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModels          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupModels = fmt.Errorf("proto: unexpected end of group")
)
